{"ast":null,"code":"var _jsxFileName = \"/home/mark/workmine/Message-App/src/components/chatting-content/chatting-content.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { firestore } from \"../../firebase/firebase.utils\";\nimport { setMessageChatted } from \"../../redux/messages/messages.action\";\nimport Message from \"../message/message.coponent\";\nimport AvatarName from \"../avatar-name/avatar-name.component\";\nimport \"./chatting-content.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChattingContent = _ref => {\n  _s();\n\n  let {\n    selectedUser,\n    currentUser,\n    messageChatted\n  } = _ref;\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messageChatted]);\n  const [message, setMessage] = useState(\"\");\n\n  const onChatting = e => {\n    setMessage(e.target.value);\n  }; // const handleKeyDown = (event) => {\n  //   if (event.key === \"Enter\" && message !== \"\") {\n  //     //save message on firestore\n  //     firestore\n  //       .collection(\"messages\")\n  //       .add({\n  //         createdAt: new Date(),\n  //         user1: currentUser.id,\n  //         user2: selectedUser.id,\n  //         message: message,\n  //         isChatting: true,\n  //       })\n  //       .then((docRef) => {\n  //         console.log(\"Document written with ID: \", docRef.id);\n  //       })\n  //       .catch((error) => {\n  //         console.error(\"Error adding document: \", error);\n  //       });\n  //     setMessage(\"\");\n  //   }\n  // };\n\n\n  const onSent = e => {\n    if (!message || !currentUser || !selectedUser) {\n      setMessage(\"\");\n      return;\n    }\n\n    if (e.key === \"Enter\" && message !== \"\") {\n      //save message on firestore\n      firestore.collection(\"messages\").add({\n        createdAt: new Date(),\n        user1: currentUser.id,\n        user2: selectedUser.id,\n        message: message,\n        isChatting: true\n      }).then(docRef => {\n        console.log(\"Document written with ID: \", docRef.id);\n      }).catch(error => {\n        console.error(\"Error adding document: \", error);\n      });\n      setMessage(\"\");\n    } // //save message on firestore\n    // firestore\n    //   .collection(\"messages\")\n    //   .add({\n    //     createdAt: new Date(),\n    //     user1: currentUser.id,\n    //     user2: selectedUser.id,\n    //     message: message,\n    //     isChatting: true,\n    //   })\n    //   .then((docRef) => {\n    //     console.log(\"Document written with ID: \", docRef.id);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error adding document: \", error);\n    //   });\n    // setMessage(\"\");\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatting-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatting-content__header\",\n      children: selectedUser ? /*#__PURE__*/_jsxDEV(AvatarName, {\n        avatarSrc: selectedUser.avatarSrc,\n        displayName: selectedUser.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatting-content__body\",\n      children: [messageChatted ? messageChatted.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        messageInfo: message,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }, this)) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatting-content__footer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message here\",\n          onChange: onChatting,\n          value: message,\n          onKeyDown: onSent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onSent,\n          className: \"btnSendMsg\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChattingContent, \"hzsRavczTVlhF4XCnCZwi1oTxaE=\");\n\n_c = ChattingContent;\n\nconst mapDispatchToProps = dispatch => ({\n  setMessageChatted: messageChatted => dispatch(setMessageChatted(messageChatted))\n});\n\nconst mapStateToProps = _ref2 => {\n  let {\n    user,\n    message\n  } = _ref2;\n  return {\n    selectedUser: user.selectedUser,\n    currentUser: user.currentUser,\n    messageChatted: message.messageChatted\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChattingContent);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChattingContent\");","map":{"version":3,"sources":["/home/mark/workmine/Message-App/src/components/chatting-content/chatting-content.jsx"],"names":["React","useEffect","useState","useRef","connect","firestore","setMessageChatted","Message","AvatarName","ChattingContent","selectedUser","currentUser","messageChatted","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","message","setMessage","onChatting","e","target","value","onSent","key","collection","add","createdAt","Date","user1","id","user2","isChatting","then","docRef","console","log","catch","error","avatarSrc","displayName","map","mapDispatchToProps","dispatch","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { firestore } from \"../../firebase/firebase.utils\";\nimport { setMessageChatted } from \"../../redux/messages/messages.action\";\nimport Message from \"../message/message.coponent\";\nimport AvatarName from \"../avatar-name/avatar-name.component\";\nimport \"./chatting-content.scss\";\n\nconst ChattingContent = ({ selectedUser, currentUser, messageChatted }) => {\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messageChatted]);\n\n  const [message, setMessage] = useState(\"\");\n  const onChatting = (e) => {\n    setMessage(e.target.value);\n  };\n\n  // const handleKeyDown = (event) => {\n  //   if (event.key === \"Enter\" && message !== \"\") {\n  //     //save message on firestore\n  //     firestore\n  //       .collection(\"messages\")\n  //       .add({\n  //         createdAt: new Date(),\n  //         user1: currentUser.id,\n  //         user2: selectedUser.id,\n  //         message: message,\n  //         isChatting: true,\n  //       })\n  //       .then((docRef) => {\n  //         console.log(\"Document written with ID: \", docRef.id);\n  //       })\n  //       .catch((error) => {\n  //         console.error(\"Error adding document: \", error);\n  //       });\n\n  //     setMessage(\"\");\n  //   }\n  // };\n\n  const onSent = (e) => {\n    if (!message || !currentUser || !selectedUser) {\n      setMessage(\"\");\n      return;\n    }\n\n    if (e.key === \"Enter\" && message !== \"\") {\n      //save message on firestore\n      firestore\n        .collection(\"messages\")\n        .add({\n          createdAt: new Date(),\n          user1: currentUser.id,\n          user2: selectedUser.id,\n          message: message,\n          isChatting: true,\n        })\n        .then((docRef) => {\n          console.log(\"Document written with ID: \", docRef.id);\n        })\n        .catch((error) => {\n          console.error(\"Error adding document: \", error);\n        });\n\n      setMessage(\"\");\n    }\n\n    // //save message on firestore\n    // firestore\n    //   .collection(\"messages\")\n    //   .add({\n    //     createdAt: new Date(),\n    //     user1: currentUser.id,\n    //     user2: selectedUser.id,\n    //     message: message,\n    //     isChatting: true,\n    //   })\n    //   .then((docRef) => {\n    //     console.log(\"Document written with ID: \", docRef.id);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error adding document: \", error);\n    //   });\n\n    // setMessage(\"\");\n  };\n\n  return (\n    <div className=\"chatting-content\">\n      <div className=\"chatting-content__header\">\n        {selectedUser ? (\n          <AvatarName\n            avatarSrc={selectedUser.avatarSrc}\n            displayName={selectedUser.displayName}\n          />\n        ) : null}\n      </div>\n      <div className=\"chatting-content__body\">\n        {messageChatted\n          ? messageChatted.map((message) => (\n              <Message\n                messageInfo={message}\n                currentUser={currentUser}\n              ></Message>\n            ))\n          : null}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"chatting-content__footer\">\n        <div className=\"send-message\">\n          <input\n            type=\"text\"\n            placeholder=\"Type your message here\"\n            onChange={onChatting}\n            value={message}\n            onKeyDown={onSent}\n          />\n\n          <button onClick={onSent} className=\"btnSendMsg\">\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setMessageChatted: (messageChatted) =>\n    dispatch(setMessageChatted(messageChatted)),\n});\n\nconst mapStateToProps = ({ user, message }) => ({\n  selectedUser: user.selectedUser,\n  currentUser: user.currentUser,\n  messageChatted: message.messageChatted,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChattingContent);\n"]},"metadata":{},"sourceType":"module"}