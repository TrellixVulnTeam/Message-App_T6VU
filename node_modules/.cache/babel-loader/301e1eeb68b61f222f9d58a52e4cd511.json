{"ast":null,"code":"var _jsxFileName = \"/home/mark/workmine/Message-App/src/components/user-items/user-item.component.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Avatar from \"../avatar/avatar.component\";\nimport { firestore } from \"../../firebase/firebase.utils\";\nimport { setSelectedUser } from \"../../redux/user/user.actions\";\nimport { setMessageChatted } from \"../../redux/messages/messages.action\";\nimport \"./user-item.styles.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserItem = _ref => {\n  let {\n    user,\n    setSelectedUser,\n    currentUser,\n    setMessageChatted\n  } = _ref;\n  const {\n    displayName,\n    isOnline,\n    avatarSrc\n  } = user;\n\n  const onSelectedUser = () => {\n    setSelectedUser(user); // if (!currentUser || !user) return;\n    // TESTTTTTTTTTTTTTTTTTT\n\n    firestore.collection(\"messages\").where(\"user1\", \"in\", [currentUser.id, user.id]) // .orderBy(\"chattedAt\")\n    .onSnapshot(querySnapshot => {\n      var allMessages = [];\n      querySnapshot.forEach(doc => {\n        // if (\n        //   (doc.data().user1 == currentUser.id &&\n        //     doc.data().user2 == user.id) ||\n        //   (doc.data().user1 == user.id && doc.data().user2 == currentUser.id)\n        // )\n        {\n          allMessages.push(doc.data());\n        }\n      });\n      setMessageChatted(allMessages);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onSelectedUser,\n    className: `chatlist__item ${isOnline ? isOnline : \"\"} `,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: `${isOnline ? \"active\" : \"off\"} active-status`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userMeta\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          source: avatarSrc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: displayName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UserItem;\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedUser: user => dispatch(setSelectedUser(user)),\n  setMessageChatted: messageChatted => dispatch(setMessageChatted(messageChatted))\n});\n\nconst mapStateToProps = _ref2 => {\n  let {\n    user: {\n      currentUser\n    }\n  } = _ref2;\n  return {\n    currentUser\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserItem);\n\nvar _c;\n\n$RefreshReg$(_c, \"UserItem\");","map":{"version":3,"sources":["/home/mark/workmine/Message-App/src/components/user-items/user-item.component.jsx"],"names":["React","Component","connect","Avatar","firestore","setSelectedUser","setMessageChatted","UserItem","user","currentUser","displayName","isOnline","avatarSrc","onSelectedUser","collection","where","id","onSnapshot","querySnapshot","allMessages","forEach","doc","push","data","mapDispatchToProps","dispatch","messageChatted","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,iBAAT,QAAkC,sCAAlC;AAEA,OAAO,yBAAP;;;AAEA,MAAMC,QAAQ,GAAG,QAKX;AAAA,MALY;AAChBC,IAAAA,IADgB;AAEhBH,IAAAA,eAFgB;AAGhBI,IAAAA,WAHgB;AAIhBH,IAAAA;AAJgB,GAKZ;AACJ,QAAM;AAAEI,IAAAA,WAAF;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA;AAAzB,MAAuCJ,IAA7C;;AAEA,QAAMK,cAAc,GAAG,MAAM;AAC3BR,IAAAA,eAAe,CAACG,IAAD,CAAf,CAD2B,CAG3B;AAEA;;AACAJ,IAAAA,SAAS,CACNU,UADH,CACc,UADd,EAEGC,KAFH,CAES,OAFT,EAEkB,IAFlB,EAEwB,CAACN,WAAW,CAACO,EAAb,EAAiBR,IAAI,CAACQ,EAAtB,CAFxB,EAGE;AAHF,KAIGC,UAJH,CAIeC,aAAD,IAAmB;AAC7B,UAAIC,WAAW,GAAG,EAAlB;AACAD,MAAAA,aAAa,CAACE,OAAd,CAAuBC,GAAD,IAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACEF,UAAAA,WAAW,CAACG,IAAZ,CAAiBD,GAAG,CAACE,IAAJ,EAAjB;AACD;AACF,OATD;AAWAjB,MAAAA,iBAAiB,CAACa,WAAD,CAAjB;AACD,KAlBH;AAmBD,GAzBD;;AA2BA,sBACE;AACE,IAAA,OAAO,EAAEN,cADX;AAEE,IAAA,SAAS,EAAG,kBAAiBF,QAAQ,GAAGA,QAAH,GAAc,EAAG,GAFxD;AAAA,2BAIE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAM,QAAA,SAAS,EAAG,GAAEA,QAAQ,GAAG,QAAH,GAAc,KAAM;AAAhD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAEC;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,iCACE;AAAA,sBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAnDD;;KAAMH,Q;;AAqDN,MAAMiB,kBAAkB,GAAIC,QAAD,KAAe;AACxCpB,EAAAA,eAAe,EAAGG,IAAD,IAAUiB,QAAQ,CAACpB,eAAe,CAACG,IAAD,CAAhB,CADK;AAExCF,EAAAA,iBAAiB,EAAGoB,cAAD,IACjBD,QAAQ,CAACnB,iBAAiB,CAACoB,cAAD,CAAlB;AAH8B,CAAf,CAA3B;;AAMA,MAAMC,eAAe,GAAG;AAAA,MAAC;AAAEnB,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAAD;AAAA,SAAgC;AACtDA,IAAAA;AADsD,GAAhC;AAAA,CAAxB;;AAIA,eAAeP,OAAO,CAACyB,eAAD,EAAkBH,kBAAlB,CAAP,CAA6CjB,QAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Avatar from \"../avatar/avatar.component\";\nimport { firestore } from \"../../firebase/firebase.utils\";\nimport { setSelectedUser } from \"../../redux/user/user.actions\";\nimport { setMessageChatted } from \"../../redux/messages/messages.action\";\n\nimport \"./user-item.styles.scss\";\n\nconst UserItem = ({\n  user,\n  setSelectedUser,\n  currentUser,\n  setMessageChatted,\n}) => {\n  const { displayName, isOnline, avatarSrc } = user;\n\n  const onSelectedUser = () => {\n    setSelectedUser(user);\n\n    // if (!currentUser || !user) return;\n\n    // TESTTTTTTTTTTTTTTTTTT\n    firestore\n      .collection(\"messages\")\n      .where(\"user1\", \"in\", [currentUser.id, user.id])\n      // .orderBy(\"chattedAt\")\n      .onSnapshot((querySnapshot) => {\n        var allMessages = [];\n        querySnapshot.forEach((doc) => {\n          // if (\n          //   (doc.data().user1 == currentUser.id &&\n          //     doc.data().user2 == user.id) ||\n          //   (doc.data().user1 == user.id && doc.data().user2 == currentUser.id)\n          // )\n          {\n            allMessages.push(doc.data());\n          }\n        });\n\n        setMessageChatted(allMessages);\n      });\n  };\n\n  return (\n    <div\n      onClick={onSelectedUser}\n      className={`chatlist__item ${isOnline ? isOnline : \"\"} `}\n    >\n      <div className=\"flex\">\n        <span className={`${isOnline ? \"active\" : \"off\"} active-status`}></span>\n        <div className=\"userMeta\">\n          <Avatar source={avatarSrc} />\n          <div>\n            <p>{displayName}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setSelectedUser: (user) => dispatch(setSelectedUser(user)),\n  setMessageChatted: (messageChatted) =>\n    dispatch(setMessageChatted(messageChatted)),\n});\n\nconst mapStateToProps = ({ user: { currentUser } }) => ({\n  currentUser,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserItem);\n"]},"metadata":{},"sourceType":"module"}