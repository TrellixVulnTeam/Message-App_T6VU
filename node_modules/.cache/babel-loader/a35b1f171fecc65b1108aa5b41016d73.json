{"ast":null,"code":"import { addDays, endOfMonth, startOfMonth } from 'date-fns';\nimport { getModifierStatus } from '../../hooks/useDayModifiers/utils/getModifierStatus';\n\nvar isFocusable = function (modifiers) {\n  return !modifiers.disabled && !modifiers.hidden;\n};\n/**\n * Returns the day that should be the target of the focus when initially\n * rendered according to the following requirements:\n *  1. if there is a selected day, focus on the (first) selected day\n *  2. else if the display months include the current date (today) focus on the current date\n *  3. else focus on the first focusable day\n *  4. else there is nothing to focus on\n */\n\n\nexport function getInitialFocusTarget(displayMonths, modifiersContext) {\n  var firstDayInMonth = startOfMonth(displayMonths[0]);\n  var lastDayInMonth = endOfMonth(displayMonths[displayMonths.length - 1]);\n  var firstFocusableDay;\n  var today;\n  var date = firstDayInMonth;\n\n  while (date <= lastDayInMonth) {\n    var modifiers = getModifierStatus(date, modifiersContext);\n\n    if (!isFocusable(modifiers)) {\n      date = addDays(date, 1);\n      continue;\n    }\n\n    if (modifiers.selected) {\n      return date;\n    }\n\n    if (modifiers.today && !today) {\n      today = date;\n    }\n\n    if (!firstFocusableDay) {\n      firstFocusableDay = date;\n    }\n\n    date = addDays(date, 1);\n  }\n\n  if (today) {\n    return today;\n  } else {\n    return firstFocusableDay;\n  }\n}","map":{"version":3,"sources":["../../../src/contexts/Focus/getInitialFocusTarget.tsx"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,UAAlB,EAA8B,YAA9B,QAAkD,UAAlD;AAEA,SAAS,iBAAT,QAAkC,qDAAlC;;AAGA,IAAM,WAAW,GAAG,UAAC,SAAD,EAA0B;AAC5C,SAAA,CAAC,SAAS,CAAC,QAAX,IAAuB,CAAC,SAAS,CAAC,MAAlC;AAAwC,CAD1C;AAGA;;;;;;;AAOG;;;AACH,OAAM,SAAU,qBAAV,CACJ,aADI,EAEJ,gBAFI,EAEuB;AAE3B,MAAM,eAAe,GAAG,YAAY,CAAC,aAAa,CAAC,CAAD,CAAd,CAApC;AACA,MAAM,cAAc,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,MAAd,GAAuB,CAAxB,CAAd,CAAjC;AAEA,MAAI,iBAAJ;AACA,MAAI,KAAJ;AACA,MAAI,IAAI,GAAG,eAAX;;AAEA,SAAO,IAAI,IAAI,cAAf,EAA+B;AAC7B,QAAM,SAAS,GAAG,iBAAiB,CAAC,IAAD,EAAO,gBAAP,CAAnC;;AACA,QAAI,CAAC,WAAW,CAAC,SAAD,CAAhB,EAA6B;AAC3B,MAAA,IAAI,GAAG,OAAO,CAAC,IAAD,EAAO,CAAP,CAAd;AACA;AACD;;AACD,QAAI,SAAS,CAAC,QAAd,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD,QAAI,SAAS,CAAC,KAAV,IAAmB,CAAC,KAAxB,EAA+B;AAC7B,MAAA,KAAK,GAAG,IAAR;AACD;;AACD,QAAI,CAAC,iBAAL,EAAwB;AACtB,MAAA,iBAAiB,GAAG,IAApB;AACD;;AACD,IAAA,IAAI,GAAG,OAAO,CAAC,IAAD,EAAO,CAAP,CAAd;AACD;;AACD,MAAI,KAAJ,EAAW;AACT,WAAO,KAAP;AACD,GAFD,MAEO;AACL,WAAO,iBAAP;AACD;AACF","sourcesContent":["import { addDays, endOfMonth, startOfMonth } from 'date-fns';\nimport { getModifierStatus } from '../../hooks/useDayModifiers/utils/getModifierStatus';\nvar isFocusable = function (modifiers) {\n    return !modifiers.disabled && !modifiers.hidden;\n};\n/**\n * Returns the day that should be the target of the focus when initially\n * rendered according to the following requirements:\n *  1. if there is a selected day, focus on the (first) selected day\n *  2. else if the display months include the current date (today) focus on the current date\n *  3. else focus on the first focusable day\n *  4. else there is nothing to focus on\n */\nexport function getInitialFocusTarget(displayMonths, modifiersContext) {\n    var firstDayInMonth = startOfMonth(displayMonths[0]);\n    var lastDayInMonth = endOfMonth(displayMonths[displayMonths.length - 1]);\n    var firstFocusableDay;\n    var today;\n    var date = firstDayInMonth;\n    while (date <= lastDayInMonth) {\n        var modifiers = getModifierStatus(date, modifiersContext);\n        if (!isFocusable(modifiers)) {\n            date = addDays(date, 1);\n            continue;\n        }\n        if (modifiers.selected) {\n            return date;\n        }\n        if (modifiers.today && !today) {\n            today = date;\n        }\n        if (!firstFocusableDay) {\n            firstFocusableDay = date;\n        }\n        date = addDays(date, 1);\n    }\n    if (today) {\n        return today;\n    }\n    else {\n        return firstFocusableDay;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}