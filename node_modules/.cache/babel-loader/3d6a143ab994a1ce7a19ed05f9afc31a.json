{"ast":null,"code":"var _jsxFileName = \"/home/mark/workmine/Message-App/src/components/chatting-content/chatting-content.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./chatting-content.scss\";\nimport { firestore } from \"../../firebase/firebase.utils\";\nimport Message from \"../message/message.coponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChattingContent = _ref => {\n  _s();\n\n  let {\n    selectedUser,\n    currentUser,\n    messageChatted,\n    setMessageChatted\n  } = _ref;\n  useEffect(() => {}, []);\n  const [message, setMessage] = useState(\"\");\n\n  const onChatting = e => {\n    setMessage(e.target.value);\n  };\n\n  const onSent = e => {\n    // const messagePackage = {\n    //   user1: currentUser.id,\n    //   user2: selectedUser.id,\n    //   message: message,\n    //   isChatting: true,\n    // };\n    if (!message || !currentUser || !selectedUser) {\n      setMessage(\"\");\n      return;\n    } //save message on firestore\n\n\n    firestore.collection(\"messages\").add({\n      user1: currentUser.id,\n      user2: selectedUser.id,\n      message: message,\n      isChatting: true,\n      chattedAt: new Date()\n    }).then(docRef => {\n      console.log(\"Document written with ID: \", docRef.id);\n      firestore.collection(\"messages\").where(\"user1\", \"in\", [currentUser.id, selectedUser.id]).orderBy(\"chattedAt\").onSnapshot(querySnapshot => {\n        var allMessages = [];\n        querySnapshot.forEach(doc => {\n          // if (\n          //   (doc.data().user1 == currentUser.id &&\n          //     doc.data().user2 == user.id) ||\n          //   (doc.data().user1 == user.id && doc.data().user2 == currentUser.id)\n          // )\n          {\n            allMessages.push(doc.data());\n          }\n        });\n      });\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n    });\n    setMessage(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatting-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatting-content__header\",\n      children: selectedUser ? selectedUser.displayName : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatting-content__body\",\n      children: messageChatted ? messageChatted.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        messageInfo: message,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatting-content__footer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message here\",\n          onChange: onChatting,\n          value: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onSent,\n          className: \"btnSendMsg\",\n          id: \"sendMsgBtn\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-paper-plane\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), \"send\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChattingContent, \"3/5FmQ3pWGIRMLBqF9P0Dasu+Sw=\");\n\n_c = ChattingContent;\n\nconst mapDispatchToProps = dispatch => ({\n  setMessageChatted: messageChatted => dispatch(setMessageChatted(messageChatted))\n});\n\nconst mapStateToProps = _ref2 => {\n  let {\n    user,\n    message\n  } = _ref2;\n  return {\n    selectedUser: user.selectedUser,\n    currentUser: user.currentUser,\n    messageChatted: message.messageChatted\n  };\n};\n\nexport default connect(mapStateToProps)(ChattingContent);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChattingContent\");","map":{"version":3,"sources":["/home/mark/workmine/Message-App/src/components/chatting-content/chatting-content.jsx"],"names":["React","useState","useEffect","connect","firestore","Message","ChattingContent","selectedUser","currentUser","messageChatted","setMessageChatted","message","setMessage","onChatting","e","target","value","onSent","collection","add","user1","id","user2","isChatting","chattedAt","Date","then","docRef","console","log","where","orderBy","onSnapshot","querySnapshot","allMessages","forEach","doc","push","data","catch","error","displayName","map","mapDispatchToProps","dispatch","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./chatting-content.scss\";\nimport { firestore } from \"../../firebase/firebase.utils\";\nimport Message from \"../message/message.coponent\";\n\nconst ChattingContent = ({\n  selectedUser,\n  currentUser,\n  messageChatted,\n  setMessageChatted,\n}) => {\n  useEffect(() => {}, []);\n\n  const [message, setMessage] = useState(\"\");\n  const onChatting = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const onSent = (e) => {\n    // const messagePackage = {\n    //   user1: currentUser.id,\n    //   user2: selectedUser.id,\n    //   message: message,\n    //   isChatting: true,\n    // };\n\n    if (!message || !currentUser || !selectedUser) {\n      setMessage(\"\");\n      return;\n    }\n\n    //save message on firestore\n    firestore\n      .collection(\"messages\")\n      .add({\n        user1: currentUser.id,\n        user2: selectedUser.id,\n        message: message,\n        isChatting: true,\n        chattedAt: new Date(),\n      })\n      .then((docRef) => {\n        console.log(\"Document written with ID: \", docRef.id);\n        firestore\n          .collection(\"messages\")\n          .where(\"user1\", \"in\", [currentUser.id, selectedUser.id])\n          .orderBy(\"chattedAt\")\n          .onSnapshot((querySnapshot) => {\n            var allMessages = [];\n            querySnapshot.forEach((doc) => {\n              // if (\n              //   (doc.data().user1 == currentUser.id &&\n              //     doc.data().user2 == user.id) ||\n              //   (doc.data().user1 == user.id && doc.data().user2 == currentUser.id)\n              // )\n              {\n                allMessages.push(doc.data());\n              }\n            });\n          });\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n\n    setMessage(\"\");\n  };\n\n  return (\n    <div className=\"chatting-content\">\n      <div className=\"chatting-content__header\">\n        {selectedUser ? selectedUser.displayName : null}\n      </div>\n      <div className=\"chatting-content__body\">\n        {messageChatted\n          ? messageChatted.map((message) => (\n              <Message\n                messageInfo={message}\n                currentUser={currentUser}\n              ></Message>\n            ))\n          : null}\n      </div>\n\n      <div className=\"chatting-content__footer\">\n        <div className=\"send-message\">\n          <input\n            type=\"text\"\n            placeholder=\"Type your message here\"\n            onChange={onChatting}\n            value={message}\n          />\n          <button onClick={onSent} className=\"btnSendMsg\" id=\"sendMsgBtn\">\n            <i className=\"fa fa-paper-plane\"></i>\n            send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setMessageChatted: (messageChatted) =>\n    dispatch(setMessageChatted(messageChatted)),\n});\n\nconst mapStateToProps = ({ user, message }) => ({\n  selectedUser: user.selectedUser,\n  currentUser: user.currentUser,\n  messageChatted: message.messageChatted,\n});\n\nexport default connect(mapStateToProps)(ChattingContent);\n"]},"metadata":{},"sourceType":"module"}