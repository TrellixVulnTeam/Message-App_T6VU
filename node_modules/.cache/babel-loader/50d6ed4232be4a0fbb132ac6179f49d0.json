{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport React from 'react';\nimport { enUS } from 'date-fns/locale';\nimport { Caption } from '../../components/Caption';\nimport { CaptionLabel } from '../../components/CaptionLabel';\nimport { Day } from '../../components/Day';\nimport { DayContent } from '../../components/DayContent';\nimport { Dropdown } from '../../components/Dropdown';\nimport { Footer } from '../../components/Footer';\nimport { Head } from '../../components/Head';\nimport { IconDropdown } from '../../components/IconDropdown';\nimport { IconLeft } from '../../components/IconLeft';\nimport { IconRight } from '../../components/IconRight';\nimport { Row } from '../../components/Row';\nimport { WeekNumber } from '../../components/WeekNumber';\nimport { defaultClassNames } from './defaultClassNames';\nimport * as formatters from './formatters';\nimport * as labels from './labels';\nimport { parseFromToProps } from './utils';\n/**\n * The DayPicker Context shares the props passed to DayPicker within internal\n * and custom components. It is used to set the default values and perform\n * one-time calculations required to render the days.\n *\n * Developers may access to this context from the [[useDayPicker]] hook when\n * using custom components.\n */\n\nexport var DayPickerContext = React.createContext(undefined);\n/**\n * The provider for the [[DayPickerContext]].\n *\n * The context value is set by assigning defaults from the initial DayPicker\n * props.\n * */\n\nexport function DayPickerProvider(props) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  var children = props.children,\n      initialProps = props.initialProps;\n  var locale = (_a = initialProps.locale) !== null && _a !== void 0 ? _a : enUS;\n  var numberOfMonths = (_b = initialProps.numberOfMonths) !== null && _b !== void 0 ? _b : 1;\n  var today = (_c = initialProps.today) !== null && _c !== void 0 ? _c : new Date(); // Limit navigation\n\n  var _h = parseFromToProps(initialProps),\n      fromDate = _h.fromDate,\n      toDate = _h.toDate; // Default caption layout. If calendar navigation is unlimited, it must be\n  // always `buttons` – as we cannot display yet infinite options in the dropdown.\n\n\n  var captionLayout = (_d = initialProps.captionLayout) !== null && _d !== void 0 ? _d : 'buttons';\n  if (!fromDate && !toDate) captionLayout = 'buttons'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  var toYear = initialProps.toYear,\n      fromYear = initialProps.fromYear,\n      toMonth = initialProps.toMonth,\n      fromMonth = initialProps.fromMonth,\n      contextProps = __rest(initialProps, [\"toYear\", \"fromYear\", \"toMonth\", \"fromMonth\"]);\n\n  var context = __assign(__assign({}, contextProps), {\n    captionLayout: captionLayout,\n    fromDate: fromDate,\n    toDate: toDate,\n    today: today,\n    locale: locale,\n    modifierClassNames: (_e = initialProps.modifierClassNames) !== null && _e !== void 0 ? _e : {},\n    // TODO: Should this be initialProps.modifierPrefix ?? 'rdp-day_'?\n    modifierPrefix: 'rdp-day_',\n    modifiers: (_f = initialProps.modifiers) !== null && _f !== void 0 ? _f : {},\n    numberOfMonths: numberOfMonths,\n    styles: (_g = initialProps.styles) !== null && _g !== void 0 ? _g : {},\n    classNames: __assign(__assign({}, defaultClassNames), initialProps.classNames),\n    formatters: __assign(__assign({}, formatters), initialProps.formatters),\n    labels: __assign(__assign({}, labels), initialProps.labels),\n    components: __assign({\n      Caption: Caption,\n      CaptionLabel: CaptionLabel,\n      Day: Day,\n      DayContent: DayContent,\n      Dropdown: Dropdown,\n      Footer: Footer,\n      Head: Head,\n      IconDropdown: IconDropdown,\n      IconRight: IconRight,\n      IconLeft: IconLeft,\n      Row: Row,\n      WeekNumber: WeekNumber\n    }, initialProps.components)\n  });\n\n  return React.createElement(DayPickerContext.Provider, {\n    value: context\n  }, children);\n}","map":{"version":3,"sources":["../../../src/contexts/DayPicker/DayPickerContext.tsx"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport React from 'react';\nimport { enUS } from 'date-fns/locale';\nimport { Caption } from '../../components/Caption';\nimport { CaptionLabel } from '../../components/CaptionLabel';\nimport { Day } from '../../components/Day';\nimport { DayContent } from '../../components/DayContent';\nimport { Dropdown } from '../../components/Dropdown';\nimport { Footer } from '../../components/Footer';\nimport { Head } from '../../components/Head';\nimport { IconDropdown } from '../../components/IconDropdown';\nimport { IconLeft } from '../../components/IconLeft';\nimport { IconRight } from '../../components/IconRight';\nimport { Row } from '../../components/Row';\nimport { WeekNumber } from '../../components/WeekNumber';\nimport { defaultClassNames } from './defaultClassNames';\nimport * as formatters from './formatters';\nimport * as labels from './labels';\nimport { parseFromToProps } from './utils';\n/**\n * The DayPicker Context shares the props passed to DayPicker within internal\n * and custom components. It is used to set the default values and perform\n * one-time calculations required to render the days.\n *\n * Developers may access to this context from the [[useDayPicker]] hook when\n * using custom components.\n */\nexport var DayPickerContext = React.createContext(undefined);\n/**\n * The provider for the [[DayPickerContext]].\n *\n * The context value is set by assigning defaults from the initial DayPicker\n * props.\n * */\nexport function DayPickerProvider(props) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    var children = props.children, initialProps = props.initialProps;\n    var locale = (_a = initialProps.locale) !== null && _a !== void 0 ? _a : enUS;\n    var numberOfMonths = (_b = initialProps.numberOfMonths) !== null && _b !== void 0 ? _b : 1;\n    var today = (_c = initialProps.today) !== null && _c !== void 0 ? _c : new Date();\n    // Limit navigation\n    var _h = parseFromToProps(initialProps), fromDate = _h.fromDate, toDate = _h.toDate;\n    // Default caption layout. If calendar navigation is unlimited, it must be\n    // always `buttons` – as we cannot display yet infinite options in the dropdown.\n    var captionLayout = (_d = initialProps.captionLayout) !== null && _d !== void 0 ? _d : 'buttons';\n    if (!fromDate && !toDate)\n        captionLayout = 'buttons';\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    var toYear = initialProps.toYear, fromYear = initialProps.fromYear, toMonth = initialProps.toMonth, fromMonth = initialProps.fromMonth, contextProps = __rest(initialProps, [\"toYear\", \"fromYear\", \"toMonth\", \"fromMonth\"]);\n    var context = __assign(__assign({}, contextProps), { captionLayout: captionLayout, fromDate: fromDate, toDate: toDate, today: today, locale: locale, modifierClassNames: (_e = initialProps.modifierClassNames) !== null && _e !== void 0 ? _e : {}, \n        // TODO: Should this be initialProps.modifierPrefix ?? 'rdp-day_'?\n        modifierPrefix: 'rdp-day_', modifiers: (_f = initialProps.modifiers) !== null && _f !== void 0 ? _f : {}, numberOfMonths: numberOfMonths, styles: (_g = initialProps.styles) !== null && _g !== void 0 ? _g : {}, classNames: __assign(__assign({}, defaultClassNames), initialProps.classNames), formatters: __assign(__assign({}, formatters), initialProps.formatters), labels: __assign(__assign({}, labels), initialProps.labels), components: __assign({ Caption: Caption, CaptionLabel: CaptionLabel, Day: Day, DayContent: DayContent, Dropdown: Dropdown, Footer: Footer, Head: Head, IconDropdown: IconDropdown, IconRight: IconRight, IconLeft: IconLeft, Row: Row, WeekNumber: WeekNumber }, initialProps.components) });\n    return (React.createElement(DayPickerContext.Provider, { value: context }, children));\n}\n"]},"metadata":{},"sourceType":"module"}