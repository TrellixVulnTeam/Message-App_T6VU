{"ast":null,"code":"import React from 'react';\nimport { isSameYear, setMonth as setDateMonth, startOfMonth } from 'date-fns';\nimport { useDayPicker } from '../../contexts/DayPicker';\n/**\n * Render the dropdown to navigate between months.\n */\n\nexport function MonthsDropdown(props) {\n  var displayMonth = props.displayMonth;\n\n  var _a = useDayPicker(),\n      fromDate = _a.fromDate,\n      toDate = _a.toDate,\n      styles = _a.styles,\n      locale = _a.locale,\n      formatMonthCaption = _a.formatters.formatMonthCaption,\n      classNames = _a.classNames,\n      Dropdown = _a.components.Dropdown,\n      labelMonthDropdown = _a.labels.labelMonthDropdown;\n\n  if (!fromDate && !toDate) {\n    // TODO: use type guards\n    return React.createElement(React.Fragment, null);\n  }\n\n  var dropdownMonths = [];\n\n  if (fromDate && toDate) {\n    if (isSameYear(fromDate, toDate)) {\n      // only display the months included in the range\n      for (var month = fromDate.getMonth(); month <= toDate.getMonth(); month++) {\n        dropdownMonths.push(setDateMonth(startOfMonth(fromDate), month));\n      }\n    } else {\n      // display all the 12 months\n      for (var month = 0; month <= 11; month++) {\n        var anyDate = new Date(); // any date is OK, we just need the year\n\n        dropdownMonths.push(setDateMonth(startOfMonth(anyDate), month));\n      }\n    }\n  }\n\n  var handleChange = function (e) {\n    var newMonth = setDateMonth(new Date(displayMonth), Number(e.target.value));\n    props.onChange(newMonth);\n  };\n\n  return React.createElement(Dropdown, {\n    \"aria-label\": labelMonthDropdown(),\n    className: classNames.dropdown_month,\n    style: styles.dropdown_month,\n    onChange: handleChange,\n    value: displayMonth.getMonth(),\n    caption: formatMonthCaption(displayMonth, {\n      locale: locale\n    })\n  }, dropdownMonths.map(function (m) {\n    return React.createElement(\"option\", {\n      key: m.getMonth(),\n      value: m.getMonth()\n    }, formatMonthCaption(m, {\n      locale: locale\n    }));\n  }));\n}","map":{"version":3,"sources":["../../../src/components/MonthsDropdown/MonthsDropdown.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,UAAT,EAAqB,QAAQ,IAAI,YAAjC,EAA+C,YAA/C,QAAmE,UAAnE;AAEA,SAAS,YAAT,QAA6B,0BAA7B;AAUA;;AAEG;;AACH,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAmD;AAC/C,MAAA,YAAY,GAAK,KAAK,CAAV,YAAZ;;AAEF,MAAA,EAAA,GASF,YAAY,EATV;AAAA,MACJ,QAAQ,GAAA,EAAA,CAAA,QADJ;AAAA,MAEJ,MAAM,GAAA,EAAA,CAAA,MAFF;AAAA,MAGJ,MAAM,GAAA,EAAA,CAAA,MAHF;AAAA,MAIJ,MAAM,GAAA,EAAA,CAAA,MAJF;AAAA,MAKU,kBAAkB,GAAA,EAAA,CAAA,UAAA,CAAA,kBAL5B;AAAA,MAMJ,UAAU,GAAA,EAAA,CAAA,UANN;AAAA,MAOU,QAAQ,GAAA,EAAA,CAAA,UAAA,CAAA,QAPlB;AAAA,MAQM,kBAAkB,GAAA,EAAA,CAAA,MAAA,CAAA,kBARxB;;AAWN,MAAI,CAAC,QAAD,IAAa,CAAC,MAAlB,EAA0B;AACxB;AACA,WAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CAAP;AACD;;AACD,MAAM,cAAc,GAAW,EAA/B;;AAEA,MAAI,QAAQ,IAAI,MAAhB,EAAwB;AACtB,QAAI,UAAU,CAAC,QAAD,EAAW,MAAX,CAAd,EAAkC;AAChC;AACA,WACE,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAT,EADd,EAEE,KAAK,IAAI,MAAM,CAAC,QAAP,EAFX,EAGE,KAAK,EAHP,EAIE;AACA,QAAA,cAAc,CAAC,IAAf,CAAoB,YAAY,CAAC,YAAY,CAAC,QAAD,CAAb,EAAyB,KAAzB,CAAhC;AACD;AACF,KATD,MASO;AACL;AACA,WAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,IAAI,EAA7B,EAAiC,KAAK,EAAtC,EAA0C;AACxC,YAAM,OAAO,GAAG,IAAI,IAAJ,EAAhB,CADwC,CACZ;;AAC5B,QAAA,cAAc,CAAC,IAAf,CAAoB,YAAY,CAAC,YAAY,CAAC,OAAD,CAAb,EAAwB,KAAxB,CAAhC;AACD;AACF;AACF;;AAED,MAAM,YAAY,GAAgD,UAAC,CAAD,EAAE;AAClE,QAAM,QAAQ,GAAG,YAAY,CAC3B,IAAI,IAAJ,CAAS,YAAT,CAD2B,EAE3B,MAAM,CAAC,CAAC,CAAC,MAAF,CAAS,KAAV,CAFqB,CAA7B;AAIA,IAAA,KAAK,CAAC,QAAN,CAAe,QAAf;AACD,GAND;;AAQA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAA,kBACK,kBAAkB,EADvB;AAEP,IAAA,SAAS,EAAE,UAAU,CAAC,cAFf;AAGP,IAAA,KAAK,EAAE,MAAM,CAAC,cAHP;AAIP,IAAA,QAAQ,EAAE,YAJH;AAKP,IAAA,KAAK,EAAE,YAAY,CAAC,QAAb,EALA;AAMP,IAAA,OAAO,EAAE,kBAAkB,CAAC,YAAD,EAAe;AAAE,MAAA,MAAM,EAAA;AAAR,KAAf;AANpB,GAAT,EAQG,cAAc,CAAC,GAAf,CAAmB,UAAC,CAAD,EAAE;AAAK,WACzB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAQ,MAAA,GAAG,EAAE,CAAC,CAAC,QAAF,EAAb;AAA2B,MAAA,KAAK,EAAE,CAAC,CAAC,QAAF;AAAlC,KAAA,EACG,kBAAkB,CAAC,CAAD,EAAI;AAAE,MAAA,MAAM,EAFR;AAEA,KAAJ,CADrB,CADyB;AAI1B,GAJA,CARH,CADF;AAgBD","sourcesContent":["import React from 'react';\nimport { isSameYear, setMonth as setDateMonth, startOfMonth } from 'date-fns';\nimport { useDayPicker } from '../../contexts/DayPicker';\n/**\n * Render the dropdown to navigate between months.\n */\nexport function MonthsDropdown(props) {\n    var displayMonth = props.displayMonth;\n    var _a = useDayPicker(), fromDate = _a.fromDate, toDate = _a.toDate, styles = _a.styles, locale = _a.locale, formatMonthCaption = _a.formatters.formatMonthCaption, classNames = _a.classNames, Dropdown = _a.components.Dropdown, labelMonthDropdown = _a.labels.labelMonthDropdown;\n    if (!fromDate && !toDate) {\n        // TODO: use type guards\n        return React.createElement(React.Fragment, null);\n    }\n    var dropdownMonths = [];\n    if (fromDate && toDate) {\n        if (isSameYear(fromDate, toDate)) {\n            // only display the months included in the range\n            for (var month = fromDate.getMonth(); month <= toDate.getMonth(); month++) {\n                dropdownMonths.push(setDateMonth(startOfMonth(fromDate), month));\n            }\n        }\n        else {\n            // display all the 12 months\n            for (var month = 0; month <= 11; month++) {\n                var anyDate = new Date(); // any date is OK, we just need the year\n                dropdownMonths.push(setDateMonth(startOfMonth(anyDate), month));\n            }\n        }\n    }\n    var handleChange = function (e) {\n        var newMonth = setDateMonth(new Date(displayMonth), Number(e.target.value));\n        props.onChange(newMonth);\n    };\n    return (React.createElement(Dropdown, { \"aria-label\": labelMonthDropdown(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: displayMonth.getMonth(), caption: formatMonthCaption(displayMonth, { locale: locale }) }, dropdownMonths.map(function (m) { return (React.createElement(\"option\", { key: m.getMonth(), value: m.getMonth() }, formatMonthCaption(m, { locale: locale }))); })));\n}\n"]},"metadata":{},"sourceType":"module"}