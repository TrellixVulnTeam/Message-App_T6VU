{"ast":null,"code":"import React from 'react';\nimport { setYear, startOfYear } from 'date-fns';\nimport { useDayPicker } from '../../contexts/DayPicker';\n/**\n * Render a dropdown to change the year. Take in account the `nav.fromDate` and\n * `toDate` from context.\n */\n\nexport function YearsDropdown(props) {\n  var displayMonth = props.displayMonth;\n\n  var _a = useDayPicker(),\n      fromDate = _a.fromDate,\n      toDate = _a.toDate,\n      locale = _a.locale,\n      styles = _a.styles,\n      classNames = _a.classNames,\n      Dropdown = _a.components.Dropdown,\n      formatYearCaption = _a.formatters.formatYearCaption,\n      labelYearDropdown = _a.labels.labelYearDropdown;\n\n  var years = [];\n\n  if (fromDate && toDate) {\n    var fromYear = fromDate.getFullYear();\n    var toYear = toDate.getFullYear();\n\n    for (var year = fromYear; year <= toYear; year++) {\n      years.push(setYear(startOfYear(new Date()), year));\n    }\n  }\n\n  var handleChange = function (e) {\n    var newMonth = setYear(new Date(displayMonth), Number(e.target.value));\n    props.onChange(newMonth);\n  };\n\n  return React.createElement(Dropdown, {\n    \"aria-label\": labelYearDropdown(),\n    className: classNames.dropdown_month,\n    style: styles.dropdown_month,\n    onChange: handleChange,\n    value: displayMonth.getFullYear(),\n    caption: formatYearCaption(displayMonth, {\n      locale: locale\n    })\n  }, years.map(function (year) {\n    return React.createElement(\"option\", {\n      key: year.getFullYear(),\n      value: year.getFullYear()\n    }, formatYearCaption(year, {\n      locale: locale\n    }));\n  }));\n}","map":{"version":3,"sources":["../../../src/components/YearsDropdown/YearsDropdown.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,OAAT,EAAkB,WAAlB,QAAqC,UAArC;AAEA,SAAS,YAAT,QAA6B,0BAA7B;AAaA;;;AAGG;;AACH,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAiD;AAC7C,MAAA,YAAY,GAAK,KAAK,CAAV,YAAZ;;AACF,MAAA,EAAA,GASF,YAAY,EATV;AAAA,MACJ,QAAQ,GAAA,EAAA,CAAA,QADJ;AAAA,MAEJ,MAAM,GAAA,EAAA,CAAA,MAFF;AAAA,MAGJ,MAAM,GAAA,EAAA,CAAA,MAHF;AAAA,MAIJ,MAAM,GAAA,EAAA,CAAA,MAJF;AAAA,MAKJ,UAAU,GAAA,EAAA,CAAA,UALN;AAAA,MAMU,QAAQ,GAAA,EAAA,CAAA,UAAA,CAAA,QANlB;AAAA,MAOU,iBAAiB,GAAA,EAAA,CAAA,UAAA,CAAA,iBAP3B;AAAA,MAQM,iBAAiB,GAAA,EAAA,CAAA,MAAA,CAAA,iBARvB;;AAWN,MAAM,KAAK,GAAW,EAAtB;;AACA,MAAI,QAAQ,IAAI,MAAhB,EAAwB;AACtB,QAAM,QAAQ,GAAG,QAAQ,CAAC,WAAT,EAAjB;AACA,QAAM,MAAM,GAAG,MAAM,CAAC,WAAP,EAAf;;AACA,SAAK,IAAI,IAAI,GAAG,QAAhB,EAA0B,IAAI,IAAI,MAAlC,EAA0C,IAAI,EAA9C,EAAkD;AAChD,MAAA,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,WAAW,CAAC,IAAI,IAAJ,EAAD,CAAZ,EAA0B,IAA1B,CAAlB;AACD;AACF;;AAED,MAAM,YAAY,GAAgD,UAAC,CAAD,EAAE;AAClE,QAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,IAAJ,CAAS,YAAT,CAAD,EAAyB,MAAM,CAAC,CAAC,CAAC,MAAF,CAAS,KAAV,CAA/B,CAAxB;AACA,IAAA,KAAK,CAAC,QAAN,CAAe,QAAf;AACD,GAHD;;AAKA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAA,kBACK,iBAAiB,EADtB;AAEP,IAAA,SAAS,EAAE,UAAU,CAAC,cAFf;AAGP,IAAA,KAAK,EAAE,MAAM,CAAC,cAHP;AAIP,IAAA,QAAQ,EAAE,YAJH;AAKP,IAAA,KAAK,EAAE,YAAY,CAAC,WAAb,EALA;AAMP,IAAA,OAAO,EAAE,iBAAiB,CAAC,YAAD,EAAe;AAAE,MAAA,MAAM,EAAA;AAAR,KAAf;AANnB,GAAT,EAQG,KAAK,CAAC,GAAN,CAAU,UAAC,IAAD,EAAK;AAAK,WACnB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAQ,MAAA,GAAG,EAAE,IAAI,CAAC,WAAL,EAAb;AAAiC,MAAA,KAAK,EAAE,IAAI,CAAC,WAAL;AAAxC,KAAA,EACG,iBAAiB,CAAC,IAAD,EAAO;AAAE,MAAA,MAAM,EAFhB;AAEQ,KAAP,CADpB,CADmB;AAIpB,GAJA,CARH,CADF;AAgBD","sourcesContent":["import React from 'react';\nimport { setYear, startOfYear } from 'date-fns';\nimport { useDayPicker } from '../../contexts/DayPicker';\n/**\n * Render a dropdown to change the year. Take in account the `nav.fromDate` and\n * `toDate` from context.\n */\nexport function YearsDropdown(props) {\n    var displayMonth = props.displayMonth;\n    var _a = useDayPicker(), fromDate = _a.fromDate, toDate = _a.toDate, locale = _a.locale, styles = _a.styles, classNames = _a.classNames, Dropdown = _a.components.Dropdown, formatYearCaption = _a.formatters.formatYearCaption, labelYearDropdown = _a.labels.labelYearDropdown;\n    var years = [];\n    if (fromDate && toDate) {\n        var fromYear = fromDate.getFullYear();\n        var toYear = toDate.getFullYear();\n        for (var year = fromYear; year <= toYear; year++) {\n            years.push(setYear(startOfYear(new Date()), year));\n        }\n    }\n    var handleChange = function (e) {\n        var newMonth = setYear(new Date(displayMonth), Number(e.target.value));\n        props.onChange(newMonth);\n    };\n    return (React.createElement(Dropdown, { \"aria-label\": labelYearDropdown(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: displayMonth.getFullYear(), caption: formatYearCaption(displayMonth, { locale: locale }) }, years.map(function (year) { return (React.createElement(\"option\", { key: year.getFullYear(), value: year.getFullYear() }, formatYearCaption(year, { locale: locale }))); })));\n}\n"]},"metadata":{},"sourceType":"module"}