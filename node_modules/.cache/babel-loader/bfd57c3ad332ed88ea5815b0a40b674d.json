{"ast":null,"code":"import React from 'react';\nimport { differenceInCalendarDays, format as _format, parse } from 'date-fns';\nimport enUS from 'date-fns/locale/en-US';\nimport { parseFromToProps } from '../../contexts/DayPicker/utils';\nimport { isValidDate } from './utils/isValidDate';\n/** Return props and setters for binding an input field to DayPicker. */\n\nexport function useInput(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.locale,\n      locale = _a === void 0 ? enUS : _a,\n      required = options.required,\n      _b = options.format,\n      format = _b === void 0 ? 'PP' : _b,\n      defaultSelected = options.defaultSelected,\n      _c = options.today,\n      today = _c === void 0 ? new Date() : _c;\n\n  var _d = parseFromToProps(options),\n      fromDate = _d.fromDate,\n      toDate = _d.toDate; // Shortcut to the DateFns functions\n\n\n  var parseValue = function (value) {\n    return parse(value, format, today, {\n      locale: locale\n    });\n  }; // Initialize states\n\n\n  var _e = React.useState(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : today),\n      month = _e[0],\n      setMonth = _e[1];\n\n  var _f = React.useState(defaultSelected),\n      selectedDay = _f[0],\n      setSelectedDay = _f[1];\n\n  var defaultInputValue = defaultSelected ? _format(defaultSelected, format, {\n    locale: locale\n  }) : '';\n\n  var _g = React.useState(defaultInputValue),\n      inputValue = _g[0],\n      setInputValue = _g[1];\n\n  var reset = function () {\n    setSelectedDay(defaultSelected);\n    setMonth(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : today);\n    setInputValue(defaultInputValue !== null && defaultInputValue !== void 0 ? defaultInputValue : '');\n  };\n\n  var setSelected = function (date) {\n    setSelectedDay(date);\n    setMonth(date !== null && date !== void 0 ? date : today);\n    setInputValue(date ? _format(date, format, {\n      locale: locale\n    }) : '');\n  };\n\n  var handleDayClick = function (day, _a) {\n    var selected = _a.selected;\n\n    if (!required && selected) {\n      setSelectedDay(undefined);\n      setInputValue('');\n      return;\n    }\n\n    setSelectedDay(day);\n    setInputValue(day ? _format(day, format, {\n      locale: locale\n    }) : '');\n  };\n\n  var handleMonthChange = function (month) {\n    setMonth(month);\n  }; // When changing the input field, save its value in state and check if the\n  // string is a valid date. If it is a valid day, set it as selected and update\n  // the calendarâ€™s month.\n\n\n  var handleChange = function (e) {\n    setInputValue(e.target.value);\n    var day = parseValue(e.target.value);\n    var isBefore = fromDate && differenceInCalendarDays(fromDate, day) > 0;\n    var isAfter = toDate && differenceInCalendarDays(day, toDate) > 0;\n\n    if (!isValidDate(day) || isBefore || isAfter) {\n      setSelectedDay(undefined);\n      return;\n    }\n\n    setSelectedDay(day);\n    setMonth(day);\n  }; // Special case for _required_ fields: on blur, if the value of the input is not\n  // a valid date, reset the calendar and the input value.\n\n\n  var handleBlur = function (e) {\n    var day = parseValue(e.target.value);\n\n    if (!isValidDate(day)) {\n      reset();\n    }\n  }; // When focusing, make sure DayPicker visualizes the month of the date in the\n  // input field.\n\n\n  var handleFocus = function (e) {\n    if (!e.target.value) {\n      reset();\n      return;\n    }\n\n    var day = parseValue(e.target.value);\n\n    if (isValidDate(day)) {\n      setMonth(day);\n    }\n  };\n\n  var dayPickerProps = {\n    mode: 'custom',\n    month: month,\n    onDayClick: handleDayClick,\n    onMonthChange: handleMonthChange,\n    selected: selectedDay,\n    locale: locale,\n    fromDate: options === null || options === void 0 ? void 0 : options.fromDate,\n    toDate: options === null || options === void 0 ? void 0 : options.toDate,\n    today: today\n  };\n  var inputProps = {\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    value: inputValue,\n    placeholder: _format(new Date(), format, {\n      locale: locale\n    })\n  };\n  return {\n    dayPickerProps: dayPickerProps,\n    inputProps: inputProps,\n    reset: reset,\n    setSelected: setSelected\n  };\n}","map":{"version":3,"sources":["../../../src/hooks/useInput/useInput.ts"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { differenceInCalendarDays, format as _format, parse } from 'date-fns';\nimport enUS from 'date-fns/locale/en-US';\nimport { parseFromToProps } from '../../contexts/DayPicker/utils';\nimport { isValidDate } from './utils/isValidDate';\n/** Return props and setters for binding an input field to DayPicker. */\nexport function useInput(options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.locale, locale = _a === void 0 ? enUS : _a, required = options.required, _b = options.format, format = _b === void 0 ? 'PP' : _b, defaultSelected = options.defaultSelected, _c = options.today, today = _c === void 0 ? new Date() : _c;\n    var _d = parseFromToProps(options), fromDate = _d.fromDate, toDate = _d.toDate;\n    // Shortcut to the DateFns functions\n    var parseValue = function (value) { return parse(value, format, today, { locale: locale }); };\n    // Initialize states\n    var _e = React.useState(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : today), month = _e[0], setMonth = _e[1];\n    var _f = React.useState(defaultSelected), selectedDay = _f[0], setSelectedDay = _f[1];\n    var defaultInputValue = defaultSelected\n        ? _format(defaultSelected, format, { locale: locale })\n        : '';\n    var _g = React.useState(defaultInputValue), inputValue = _g[0], setInputValue = _g[1];\n    var reset = function () {\n        setSelectedDay(defaultSelected);\n        setMonth(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : today);\n        setInputValue(defaultInputValue !== null && defaultInputValue !== void 0 ? defaultInputValue : '');\n    };\n    var setSelected = function (date) {\n        setSelectedDay(date);\n        setMonth(date !== null && date !== void 0 ? date : today);\n        setInputValue(date ? _format(date, format, { locale: locale }) : '');\n    };\n    var handleDayClick = function (day, _a) {\n        var selected = _a.selected;\n        if (!required && selected) {\n            setSelectedDay(undefined);\n            setInputValue('');\n            return;\n        }\n        setSelectedDay(day);\n        setInputValue(day ? _format(day, format, { locale: locale }) : '');\n    };\n    var handleMonthChange = function (month) {\n        setMonth(month);\n    };\n    // When changing the input field, save its value in state and check if the\n    // string is a valid date. If it is a valid day, set it as selected and update\n    // the calendarâ€™s month.\n    var handleChange = function (e) {\n        setInputValue(e.target.value);\n        var day = parseValue(e.target.value);\n        var isBefore = fromDate && differenceInCalendarDays(fromDate, day) > 0;\n        var isAfter = toDate && differenceInCalendarDays(day, toDate) > 0;\n        if (!isValidDate(day) || isBefore || isAfter) {\n            setSelectedDay(undefined);\n            return;\n        }\n        setSelectedDay(day);\n        setMonth(day);\n    };\n    // Special case for _required_ fields: on blur, if the value of the input is not\n    // a valid date, reset the calendar and the input value.\n    var handleBlur = function (e) {\n        var day = parseValue(e.target.value);\n        if (!isValidDate(day)) {\n            reset();\n        }\n    };\n    // When focusing, make sure DayPicker visualizes the month of the date in the\n    // input field.\n    var handleFocus = function (e) {\n        if (!e.target.value) {\n            reset();\n            return;\n        }\n        var day = parseValue(e.target.value);\n        if (isValidDate(day)) {\n            setMonth(day);\n        }\n    };\n    var dayPickerProps = {\n        mode: 'custom',\n        month: month,\n        onDayClick: handleDayClick,\n        onMonthChange: handleMonthChange,\n        selected: selectedDay,\n        locale: locale,\n        fromDate: options === null || options === void 0 ? void 0 : options.fromDate,\n        toDate: options === null || options === void 0 ? void 0 : options.toDate,\n        today: today\n    };\n    var inputProps = {\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onFocus: handleFocus,\n        value: inputValue,\n        placeholder: _format(new Date(), format, { locale: locale })\n    };\n    return { dayPickerProps: dayPickerProps, inputProps: inputProps, reset: reset, setSelected: setSelected };\n}\n"]},"metadata":{},"sourceType":"module"}