{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport React from 'react';\nimport { isSameDay } from 'date-fns';\nimport { isDayPickerMultiple } from '../../types/DayPickerMultiple';\n/**\n * The SelectMultiple context shares details about the selected days when in\n * multiple selection mode.\n *\n * Access this context from the [[useSelectMultiple]] hook.\n */\n\nexport var SelectMultipleContext = React.createContext(undefined);\n/** Provides the values for the [[SelectMultipleContext]]. */\n\nexport function SelectMultipleProvider(props) {\n  if (!isDayPickerMultiple(props.initialProps)) {\n    var emptyContextValue = {\n      selected: undefined,\n      modifiers: {\n        disabled: []\n      }\n    };\n    return React.createElement(SelectMultipleContext.Provider, {\n      value: emptyContextValue\n    }, props.children);\n  }\n\n  return React.createElement(SelectMultipleProviderInternal, {\n    initialProps: props.initialProps,\n    children: props.children\n  });\n}\nexport function SelectMultipleProviderInternal(_a) {\n  var initialProps = _a.initialProps,\n      children = _a.children;\n  var selected = initialProps.selected;\n\n  var onDayClick = function (day, modifiers, e) {\n    var _a, _b;\n\n    (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, modifiers, e);\n    var isMinSelected = Boolean(initialProps.min && modifiers.selected && selected && selected.length === initialProps.min);\n\n    if (isMinSelected) {\n      return;\n    }\n\n    var isMaxSelected = Boolean(initialProps.max && !modifiers.selected && selected && selected.length === initialProps.max);\n\n    if (isMaxSelected) {\n      return;\n    }\n\n    var days = selected ? __spreadArray([], selected, true) : [];\n\n    if (modifiers.selected) {\n      var index = days.findIndex(function (selectedDay) {\n        return isSameDay(day, selectedDay);\n      });\n      days.splice(index, 1);\n    } else {\n      days.push(day);\n    }\n\n    (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, days, day, modifiers, e);\n  };\n\n  var modifiers = {\n    disabled: []\n  };\n\n  if (selected) {\n    modifiers.disabled = [function disableDay(day) {\n      var isMaxSelected = initialProps.max && selected && selected.length > initialProps.max - 1;\n      var isSelected = selected === null || selected === void 0 ? void 0 : selected.some(function (selectedDay) {\n        return isSameDay(selectedDay, day);\n      });\n      return Boolean(isMaxSelected && !isSelected);\n    }];\n  }\n\n  var contextValue = {\n    selected: selected,\n    onDayClick: onDayClick,\n    modifiers: modifiers\n  };\n  return React.createElement(SelectMultipleContext.Provider, {\n    value: contextValue\n  }, children);\n}","map":{"version":3,"sources":["../../../src/contexts/SelectMultiple/SelectMultipleContext.tsx"],"names":[],"mappings":"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","sourcesContent":["import { __spreadArray } from \"tslib\";\nimport React from 'react';\nimport { isSameDay } from 'date-fns';\nimport { isDayPickerMultiple } from '../../types/DayPickerMultiple';\n/**\n * The SelectMultiple context shares details about the selected days when in\n * multiple selection mode.\n *\n * Access this context from the [[useSelectMultiple]] hook.\n */\nexport var SelectMultipleContext = React.createContext(undefined);\n/** Provides the values for the [[SelectMultipleContext]]. */\nexport function SelectMultipleProvider(props) {\n    if (!isDayPickerMultiple(props.initialProps)) {\n        var emptyContextValue = {\n            selected: undefined,\n            modifiers: {\n                disabled: []\n            }\n        };\n        return (React.createElement(SelectMultipleContext.Provider, { value: emptyContextValue }, props.children));\n    }\n    return (React.createElement(SelectMultipleProviderInternal, { initialProps: props.initialProps, children: props.children }));\n}\nexport function SelectMultipleProviderInternal(_a) {\n    var initialProps = _a.initialProps, children = _a.children;\n    var selected = initialProps.selected;\n    var onDayClick = function (day, modifiers, e) {\n        var _a, _b;\n        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, modifiers, e);\n        var isMinSelected = Boolean(initialProps.min &&\n            modifiers.selected &&\n            selected &&\n            selected.length === initialProps.min);\n        if (isMinSelected) {\n            return;\n        }\n        var isMaxSelected = Boolean(initialProps.max &&\n            !modifiers.selected &&\n            selected &&\n            selected.length === initialProps.max);\n        if (isMaxSelected) {\n            return;\n        }\n        var days = selected ? __spreadArray([], selected, true) : [];\n        if (modifiers.selected) {\n            var index = days.findIndex(function (selectedDay) {\n                return isSameDay(day, selectedDay);\n            });\n            days.splice(index, 1);\n        }\n        else {\n            days.push(day);\n        }\n        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, days, day, modifiers, e);\n    };\n    var modifiers = {\n        disabled: []\n    };\n    if (selected) {\n        modifiers.disabled = [\n            function disableDay(day) {\n                var isMaxSelected = initialProps.max &&\n                    selected &&\n                    selected.length > initialProps.max - 1;\n                var isSelected = selected === null || selected === void 0 ? void 0 : selected.some(function (selectedDay) {\n                    return isSameDay(selectedDay, day);\n                });\n                return Boolean(isMaxSelected && !isSelected);\n            }\n        ];\n    }\n    var contextValue = { selected: selected, onDayClick: onDayClick, modifiers: modifiers };\n    return (React.createElement(SelectMultipleContext.Provider, { value: contextValue }, children));\n}\n"]},"metadata":{},"sourceType":"module"}